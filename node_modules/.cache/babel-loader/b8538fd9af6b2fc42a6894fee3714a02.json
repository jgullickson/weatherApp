{"ast":null,"code":"var _jsxFileName = \"/Users/jgullick/Documents/PersonalProjects/ReactProjects/weatherApp/src/components/Controls.js\";\nimport React from 'react';\nimport M from 'materialize-css';\nimport { connect } from 'react-redux'; // import '../css/Controls.css';\n\nimport { toggleUnits, toggleMode, getWeatherByManualLocation, getWeatherByGeoLocation } from '../redux/actions';\n\nclass Controls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    M.AutoInit();\n    this.setState({\n      editorText: ''\n    });\n    this.props.getWeatherByGeoLocation();\n  }\n\n  handleChange(e) {\n    this.setState({\n      editorText: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"control-container\",\n      className: this.props.cols,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, this.props.mode === 'manual' && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"location\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Enter Location\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"location\",\n      id: \"location\",\n      onChange: this.handleChange,\n      className: \"col s12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.props.getWeatherByManualLocation(this.state.editorText),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Get Weather\")), this.props.mode === 'geo' && React.createElement(\"button\", {\n      onClick: () => this.props.getWeatherByGeoLocation(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Refresh \", React.createElement(\"i\", {\n      className: \"material-icons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"refresh\")), React.createElement(\"button\", {\n      onClick: () => this.props.toggleMode(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Toggle Mode\"), React.createElement(\"button\", {\n      onClick: () => this.props.toggleUnits(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Toggle Units\")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    data,\n    units,\n    mode,\n    isFetching\n  } = state;\n  return {\n    data,\n    units,\n    mode,\n    isFetching\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleUnits: () => dispatch(toggleUnits()),\n    getWeatherByManualLocation: location => dispatch(getWeatherByManualLocation(location)),\n    getWeatherByGeoLocation: () => dispatch(getWeatherByGeoLocation()),\n    toggleMode: () => dispatch(toggleMode())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);","map":{"version":3,"sources":["/Users/jgullick/Documents/PersonalProjects/ReactProjects/weatherApp/src/components/Controls.js"],"names":["React","M","connect","toggleUnits","toggleMode","getWeatherByManualLocation","getWeatherByGeoLocation","Controls","Component","constructor","props","handleChange","bind","componentDidMount","AutoInit","setState","editorText","e","target","value","render","cols","mode","state","mapStateToProps","data","units","isFetching","mapDispatchToProps","dispatch","location"],"mappings":"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","sourcesContent":["import React from 'react';\nimport M from 'materialize-css';\nimport { connect } from 'react-redux';\n// import '../css/Controls.css';\nimport { toggleUnits, toggleMode, getWeatherByManualLocation, getWeatherByGeoLocation } from '../redux/actions';\n\nclass Controls extends React.Component {\n    constructor(props){\n        super(props)\n        this.handleChange = this.handleChange.bind(this);\n    }\n    componentDidMount(){\n        M.AutoInit();\n        this.setState( { editorText: ''} );\n        this.props.getWeatherByGeoLocation();\n    }\n    handleChange(e){\n        this.setState( { editorText: e.target.value } )\n    }\n    render(){\n        return(\n            <div id='control-container' className={this.props.cols}>\n                    <div className='input-field'>\n                        {/* MANUAL FORM */}\n                        { this.props.mode === 'manual' &&\n                            <div>\n                            <label htmlFor='location'>Enter Location</label>\n                            <input \n                                type='text'\n                                name='location'\n                                id='location'\n                                onChange={this.handleChange}\n                                className='col s12'\n                                />\n                            <button \n                                onClick={() => this.props.getWeatherByManualLocation(this.state.editorText)}\n                                \n                                >Get Weather</button>\n                            </div>\n                        }\n                        {this.props.mode === 'geo' &&\n                            <button \n                            onClick={() => this.props.getWeatherByGeoLocation()}\n                            \n                            >Refresh <i className='material-icons'>refresh</i></button>\n                        }\n                            <button \n                                \n                                onClick={() => this.props.toggleMode()}\n                                \n                                >Toggle Mode</button>\n                            <button \n                                \n                                onClick={() => this.props.toggleUnits()}\n                                \n                                >Toggle Units</button>\n                    </div>\n                </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const { data, units, mode, isFetching } = state;\n    return { \n        data,\n        units,\n        mode,\n        isFetching\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        toggleUnits: () => dispatch(toggleUnits()),\n        getWeatherByManualLocation: (location) => dispatch(getWeatherByManualLocation(location)),\n        getWeatherByGeoLocation: () => dispatch(getWeatherByGeoLocation()),\n        toggleMode: () => dispatch(toggleMode())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\n\n"]},"metadata":{},"sourceType":"module"}