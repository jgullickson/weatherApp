{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { TOGGLE_UNITS, TOGGLE_MODE, REQUEST_DATA, RECEIVE_DATA } from './actions';\nimport ReduxThunk from 'redux-thunk';\nconst defaultState = {\n  key: '6fa2ee15e2da46c3b7c184521202002',\n  units: 'imperial',\n  mode: 'geo',\n  isFetching: false,\n  data: {\n    forecast: {}\n  }\n};\n\nconst mainReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case TOGGLE_UNITS:\n      return Object.assign({}, state, {\n        units: state.units === 'imperial' ? 'metric' : 'imperial'\n      });\n\n    case TOGGLE_MODE:\n      return Object.assign({}, state, {\n        mode: state.mode === 'geo' ? 'manual' : 'geo'\n      });\n\n    case REQUEST_DATA:\n      return Object.assign({}, state, {\n        isFetching: true\n      });\n\n    case RECEIVE_DATA:\n      console.log('receiving data');\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(mainReducer, applyMiddleware(ReduxThunk));","map":{"version":3,"sources":["/Users/jgullick/Documents/PersonalProjects/ReactProjects/weatherApp/src/redux/reducers.js"],"names":["createStore","applyMiddleware","TOGGLE_UNITS","TOGGLE_MODE","REQUEST_DATA","RECEIVE_DATA","ReduxThunk","defaultState","key","units","mode","isFetching","data","forecast","mainReducer","state","action","type","Object","assign","console","log","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,YAApC,EAAkDC,YAAlD,QAAsE,WAAtE;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,GAAG,EAAE,iCADY;AAEjBC,EAAAA,KAAK,EAAE,UAFU;AAGjBC,EAAAA,IAAI,EAAE,KAHW;AAIjBC,EAAAA,UAAU,EAAE,KAJK;AAKjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE;AADR;AALW,CAArB;;AAUA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKf,YAAL;AACI,aAAOgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,KAAgB,UAAhB,GAA6B,QAA7B,GAAwC;AAAjD,OAAzB,CAAP;;AACJ,SAAKN,WAAL;AACI,aAAOe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEL,QAAAA,IAAI,EAAEK,KAAK,CAACL,IAAN,KAAe,KAAf,GAAuB,QAAvB,GAAkC;AAA1C,OAAzB,CAAP;;AACJ,SAAKN,YAAL;AACI,aAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEJ,QAAAA,UAAU,EAAE;AAAd,OAAzB,CAAP;;AACJ,SAAKN,YAAL;AACIe,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,aAAOH,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEJ,QAAAA,UAAU,EAAE,KAAd;AAAqBC,QAAAA,IAAI,EAAEI,MAAM,CAACJ;AAAlC,OAAzB,CAAP;;AACJ;AACI,aAAOG,KAAP;AAXR;AAaH,CAdD;;AAgBA,OAAO,MAAMO,KAAK,GAAGtB,WAAW,CAACc,WAAD,EAAcb,eAAe,CAACK,UAAD,CAA7B,CAAzB","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { TOGGLE_UNITS, TOGGLE_MODE, REQUEST_DATA, RECEIVE_DATA } from './actions';\nimport ReduxThunk from 'redux-thunk';\n\nconst defaultState = {\n    key: '6fa2ee15e2da46c3b7c184521202002',\n    units: 'imperial',\n    mode: 'geo',\n    isFetching: false,\n    data: {\n        forecast: {}\n    }\n}\n\nconst mainReducer = (state = defaultState, action) => {\n    switch(action.type){\n        case TOGGLE_UNITS:\n            return Object.assign({}, state, { units: state.units === 'imperial' ? 'metric' : 'imperial'});\n        case TOGGLE_MODE:\n            return Object.assign({}, state, { mode: state.mode === 'geo' ? 'manual' : 'geo'});\n        case REQUEST_DATA:\n            return Object.assign({}, state, { isFetching: true });\n        case RECEIVE_DATA:\n            console.log('receiving data');\n            return Object.assign({}, state, { isFetching: false, data: action.data });\n        default:\n            return state;\n    }\n}\n\nexport const store = createStore(mainReducer, applyMiddleware(ReduxThunk));"]},"metadata":{},"sourceType":"module"}